gene.list.effectors = c("CSK", "INPP5D", "PTPN6", "PTPN11", "PTPN22")
gene.list.54 = as.vector(unlist(read_tsv("/Users/wli20/hzi-li/lab/mihai/column1.txt")))
gene.list = gene.list.itim
setdiff(as.vector(unlist(gene.list)), rownames(markers))
markers.in.genelist = markers[which(rownames(markers) %in% gene.list), ]
markers.in.genelist$gene = rownames(markers.in.genelist)
gene.list.withoutITIM = c("CD200R1", "CTLA4", "HAVCR2", "LAG3", "MILR1")
write_tsv(markers.in.genelist, "/Users/wli20/hzi-li/lab/mihai/vitro.bg.without.itim.txt")
gene.list.effectors = c("CSK", "INPP5D", "PTPN6", "PTPN11", "PTPN22")
gene.list = gene.list.effectors
setdiff(as.vector(unlist(gene.list)), rownames(markers))
markers.in.genelist = markers[which(rownames(markers) %in% gene.list), ]
markers.in.genelist$gene = rownames(markers.in.genelist)
write_tsv(markers.in.genelist, "/Users/wli20/hzi-li/lab/mihai/vitro.bg.effectors.txt")
vitro = subset(vitro, time == "T2")
markers = FindMarkers(temp, ident.1 = "BG", ident.2 = "RPMI",
group.by = "condition", logfc.threshold = 0)
markers = FindMarkers(vitro, ident.1 = "BG", ident.2 = "RPMI",
group.by = "condition", logfc.threshold = 0)
gene.list = gene.list.effectors
setdiff(as.vector(unlist(gene.list)), rownames(markers))
markers.in.genelist = markers[which(rownames(markers) %in% gene.list), ]
markers.in.genelist$gene = rownames(markers.in.genelist)
View(markers.in.genelist)
write_tsv(markers.in.genelist, "/Users/wli20/hzi-li/lab/mihai/vitro.bg.effectors.txt")
gene.list = gene.list.withoutITIM
# setdiff(as.vector(unlist(gene.list)), rownames(markers))
markers.in.genelist = markers[which(rownames(markers) %in% gene.list), ]
markers.in.genelist$gene = rownames(markers.in.genelist)
write_tsv(markers.in.genelist, "/Users/wli20/hzi-li/lab/mihai/vitro.bg.withoutITIM.txt")
gene.list = gene.list.54
# setdiff(as.vector(unlist(gene.list)), rownames(markers))
markers.in.genelist = markers[which(rownames(markers) %in% gene.list), ]
markers.in.genelist$gene = rownames(markers.in.genelist)
write_tsv(markers.in.genelist, "/Users/wli20/hzi-li/lab/mihai/vitro.bg.54.txt")
View(markers.in.genelist)
unique(vitro$condition)
# BG    UA    oxLDL MDP
markers = FindMarkers(vitro, ident.1 = "UA", ident.2 = "RPMI",
group.by = "condition", logfc.threshold = 0)
gene.list = gene.list.54
# setdiff(as.vector(unlist(gene.list)), rownames(markers))
markers.in.genelist = markers[which(rownames(markers) %in% gene.list), ]
markers.in.genelist$gene = rownames(markers.in.genelist)
write_tsv(markers.in.genelist, "/Users/wli20/hzi-li/lab/mihai/vitro.UA.54.txt")
gene.list = gene.list.withoutITIM
# setdiff(as.vector(unlist(gene.list)), rownames(markers))
markers.in.genelist = markers[which(rownames(markers) %in% gene.list), ]
markers.in.genelist$gene = rownames(markers.in.genelist)
write_tsv(markers.in.genelist, "/Users/wli20/hzi-li/lab/mihai/vitro.UA.ITIM.txt")
gene.list = gene.list.effectors
# setdiff(as.vector(unlist(gene.list)), rownames(markers))
markers.in.genelist = markers[which(rownames(markers) %in% gene.list), ]
markers.in.genelist$gene = rownames(markers.in.genelist)
write_tsv(markers.in.genelist, "/Users/wli20/hzi-li/lab/mihai/vitro.UA.effectors.txt")
# BG    UA    oxLDL MDP
markers = FindMarkers(vitro, ident.1 = "oxLDL", ident.2 = "RPMI",
group.by = "condition", logfc.threshold = 0)
gene.list = gene.list.effectors
# setdiff(as.vector(unlist(gene.list)), rownames(markers))
markers.in.genelist = markers[which(rownames(markers) %in% gene.list), ]
markers.in.genelist$gene = rownames(markers.in.genelist)
write_tsv(markers.in.genelist, "/Users/wli20/hzi-li/lab/mihai/vitro.LDL.effectors.txt")
gene.list = gene.list.withoutITIM
# setdiff(as.vector(unlist(gene.list)), rownames(markers))
markers.in.genelist = markers[which(rownames(markers) %in% gene.list), ]
markers.in.genelist$gene = rownames(markers.in.genelist)
write_tsv(markers.in.genelist, "/Users/wli20/hzi-li/lab/mihai/vitro.LDL.itim.txt")
gene.list = gene.list.54
# setdiff(as.vector(unlist(gene.list)), rownames(markers))
markers.in.genelist = markers[which(rownames(markers) %in% gene.list), ]
markers.in.genelist$gene = rownames(markers.in.genelist)
write_tsv(markers.in.genelist, "/Users/wli20/hzi-li/lab/mihai/vitro.LDL.54.txt")
# BG    UA    oxLDL MDP
markers = FindMarkers(vitro, ident.1 = "MDP", ident.2 = "RPMI",
group.by = "condition", logfc.threshold = 0)
gene.list = gene.list.54
# setdiff(as.vector(unlist(gene.list)), rownames(markers))
markers.in.genelist = markers[which(rownames(markers) %in% gene.list), ]
markers.in.genelist$gene = rownames(markers.in.genelist)
write_tsv(markers.in.genelist, "/Users/wli20/hzi-li/lab/mihai/vitro.MDP.54.txt")
gene.list = gene.list.withoutITIM
# setdiff(as.vector(unlist(gene.list)), rownames(markers))
markers.in.genelist = markers[which(rownames(markers) %in% gene.list), ]
markers.in.genelist$gene = rownames(markers.in.genelist)
write_tsv(markers.in.genelist, "/Users/wli20/hzi-li/lab/mihai/vitro.MDP.ITIM.txt")
gene.list = gene.list.effectors
# setdiff(as.vector(unlist(gene.list)), rownames(markers))
markers.in.genelist = markers[which(rownames(markers) %in% gene.list), ]
markers.in.genelist$gene = rownames(markers.in.genelist)
write_tsv(markers.in.genelist, "/Users/wli20/hzi-li/lab/mihai/vitro.MDP.effectors.txt")
vitro$time %>% table()
?coloc.abf
??coloc.abf
??locuscompare
gwas_fn = '/Users/wli20/hzi-li/project/genetics/results/dosage/coloc/asthma.txt'
eqtl_fn = '/Users/wli20/hzi-li/project/genetics/results/dosage/coloc/eqtl.txt'
marker_col="snp"
pval_col="pval"
locuscompare::locuscompare(in_fn1 = gwas_fn, in_fn2 = eqtl_fn, title = 'GWAS', title2 = 'eQTL',
marker_col1= marker_col, pval_col1=pval_col,
marker_col2=marker_col, pval_col2=pval_col)
locuscomparer::locuscompare(in_fn1 = gwas_fn, in_fn2 = eqtl_fn, title = 'GWAS', title2 = 'eQTL',
marker_col1= marker_col, pval_col1=pval_col,
marker_col2=marker_col, pval_col2=pval_col)
library(locuscomparer)
locuscompare(in_fn1 = gwas_fn, in_fn2 = eqtl_fn, title = 'GWAS', title2 = 'eQTL',
marker_col1= marker_col, pval_col1=pval_col,
marker_col2=marker_col, pval_col2=pval_col)
library(Seurat)
FindMarkers
wilcox.test
library(Seurat)
git remote add origin https://github.com/wenchaoli1007/DisAssoc.git
library(readr)
library(dplyr)
library(Seurat)
?FindMarkers
library(coloc)
?attach
x = c(1:10)
x = c(1:100)
n = 7
split(x, sort(x%%n))
split(x, x%%n)
a = split(x, sort(x%%n))
length(a)
max(1,10)
?readLines
?scale
library(Seurat)
?AverageExpression
?hist
?pheatmap::pheatmap
??brewer.pal
colorRampPalette(c("blue", "white", "red"))(100)
colorRampPalette(c("blue", "white", "red"))(3)
colorRampPalette(c("blue", "white", "red"))(6)
?Heatmap
??Heatmap
a = matrix(c(1,2,3,4,5,6), nrow = 2)
a
as.vector(a)
23/36
shiny::runApp('hzi-li/project/genetics/code')
runApp('hzi-li/project/genetics/code')
?mainPanel
library(Seurat)
?AddMetaData
?LETTERS
?subset
setwd("~/hzi-li/project/age/code")
cell_type = "CD8T"
all = data.frame(read_tsv(paste0("../results/vaccination/mmr/", cell_type, "_prediction.txt")))
library(readr)
library(dplyr)
library(Seurat)
library(tidyverse)
library(glmnet)
library(viridis)
library(ggpubr)
library(ggplot2)
library(biomaRt)
library(SeuratDisk)
library(infotheo)
setwd("~/hzi-li/project/age/results/")
all = data.frame(read_tsv(paste0("../results/vaccination/mmr/", cell_type, "_prediction.txt")))
mmr = all %>% filter(vaccine == "BMR")
mmr = mmr[order(mmr$age), ]
mmr = mmr %>% filter(age > 23)
unique(mmr$age)
unique(mmr$donor_id)
head(mmr)
test_plot2 = mmr %>% group_by(condition) %>% mutate(md = round(median(Prediction)))
View(test_plot2)
unique(test_plot2$md)
test_plot3 = mmr %>% group_by(condition, donor_id) %>% mutate(md = round(median(Prediction))) %>% select(donor_id, condition, md)
test_plot3 = mmr %>% group_by(condition, donor_id) %>% mutate(md = round(median(Prediction))) %>%
select(c(donor_id, condition, md))
test_plot3 = mmr %>% group_by(condition, donor_id) %>% mutate(md = round(median(Prediction)))
View(test_plot3)
unique(test_plot3$md)
table(test_plot3$donor_id, test_plot3$md)
mmr = all %>% filter(vaccine == "Placebo")
mmr = mmr[order(mmr$age), ]
mmr = mmr %>% filter(age > 23)
test_plot3 = mmr %>% group_by(condition, donor_id) %>% mutate(md = round(median(Prediction)))
table(test_plot3$donor_id, test_plot3$md)
mmr = all %>% filter(vaccine == "Placebo")
mmr = mmr[order(mmr$age), ]
unique(mmr$age)
test_plot3 = mmr %>% group_by(condition, donor_id) %>% mutate(md = round(median(Prediction)))
table(test_plot3$donor_id, test_plot3$md)
test_plot2 = mmr %>% group_by(condition) %>% mutate(md = round(median(Prediction)))
unqieu(test_plot2$md)
unique(test_plot2$md)
mmr = all %>% filter(vaccine == "Placebo")
mmr = mmr[order(mmr$age), ]
mmr = mmr %>% filter(age < 39)
test_plot2 = mmr %>% group_by(condition) %>% mutate(md = round(median(Prediction)))
√∫
unique(test_plot2$md)
pw_mtx = matrix(0, nrow = 5, ncol = 5)
colnames(pw_mtx) = c("B", "CD4T", "CD8T", "MONO", "NK")
rownames(pw_mtx) = c("B", "CD4T", "CD8T", "MONO", "NK")
comparison_df = data.frame(read_tsv("../results/grid_lasso//cross_test.txt"))
for(i in 1:dim(comparison_df)[1])
{
row_idx = match(comparison_df[i, "celltype"], rownames(pw_mtx))
col_idx = match(comparison_df[i, "model"], colnames(pw_mtx))
pw_mtx[row_idx, col_idx] = comparison_df[i, "COR"]
}
pw_mtx = t(pw_mtx)
pw_df = as.data.frame(pw_mtx)
pw_df = comparison_df
pw_df = pw_df[order(pw_df$model, pw_df$COR),]
pw_df$celltype = factor(pw_df$celltype, levels = c("B", "CD4T", "CD8T", "MONO", "NK"))
pw_df$model = factor(pw_df$model, levels = c("B", "CD4T", "CD8T", "MONO", "NK"))
pw_df$RMSE[which(pw_df$RMSE > 30)] = 30
pw_df %>%
ggplot() +
geom_point(aes(x = celltype, y = model, size = COR, color = RMSE)) +
scale_colour_continuous(high = "#FFFDFF", low = "#f3a17c", limits = c(9,35)) +
#scale_colour_viridis(limits = c(9,30)) +
theme_light() +
theme(text = element_text(size = 16), legend.title = element_text(size = 12)) +
scale_size_continuous(range = c(1,10)) +
labs(color='RMSE') +
labs(size = "COR")+
xlab("Model cross tested on") +
ylab("Model designed for")
mat = matrix(NA, nrow = 5, ncol = 5)
rownames(mat) = c("B", "CD4T", "CD8T", "MONO", "NK")  # test on
colnames(mat) = c("B", "CD4T", "CD8T", "MONO", "NK")  # model
for(i in 1:nrow(pw_df))
{
r_name = pw_df[i, 1]
c_name = pw_df[i, 4]
mat[r_name, c_name] = pw_df[i, "COR"]
}
pw_df$rank = rep(c(1,3,4,2,5), each = 5)
pw_df = pw_df[order(pw_df$rank), ]
dotplot <- pw_df %>%
ggplot() +
geom_point(aes(y = celltype, x = model, size = COR, color = RMSE)) +
scale_colour_continuous(high = "#FFFDFF", low = "#f3a17c", limits = c(9,35)) +
theme_light() +
theme(text = element_text(size = 16), legend.title = element_text(size = 12)) +
scale_size_continuous(range = c(1,10)) +
labs(color='RMSE') +
labs(size = "COR")+
ylab("Model cross tested on") +
xlab("Model designed for")+
cowplot::theme_cowplot()
plot_grid(ggtree_plot_col, dotplot, nrow = 2, axis = "tblr", align = 'v', rel_heights = c(1,3))
plot(hclust(dist(mat %>% as.matrix() %>% t())))
v_clust = hclust(dist(mat %>% as.matrix() %>% t()))  # hclust for rows
ddgram_col <- as.dendrogram(v_clust)
ggtree_plot_col <- ggtree(ddgram_col) + layout_dendrogram()
pw_df$rank = rep(c(1,3,4,2,5), each = 5)
library(ggtree)
ggtree_plot_col <- ggtree(ddgram_col) + layout_dendrogram()
pw_df$rank = rep(c(1,3,4,2,5), each = 5)
pw_df = pw_df[order(pw_df$rank), ]
dotplot <- pw_df %>%
ggplot() +
geom_point(aes(y = celltype, x = model, size = COR, color = RMSE)) +
scale_colour_continuous(high = "#FFFDFF", low = "#f3a17c", limits = c(9,35)) +
theme_light() +
theme(text = element_text(size = 16), legend.title = element_text(size = 12)) +
scale_size_continuous(range = c(1,10)) +
labs(color='RMSE') +
labs(size = "COR")+
ylab("Model cross tested on") +
xlab("Model designed for")+
cowplot::theme_cowplot()
plot_grid(ggtree_plot_col, dotplot, nrow = 2, axis = "tblr", align = 'v', rel_heights = c(1,3))
?plot_grid
library(cowplot)
plot_grid(ggtree_plot_col, dotplot, nrow = 2, axis = "tblr", align = 'v', rel_heights = c(1,3))
plot(hclust(dist(mat %>% as.matrix() %>% t())))
v_clust = hclust(dist(mat %>% as.matrix() %>% t()))  # hclust for rows
ddgram_col <- as.dendrogram(v_clust)
ggtree_plot_col <- ggtree(ddgram_col) + layout_dendrogram()
pw_df$rank = rep(c(1,3,4,2,5), each = 5)
pw_df = pw_df[order(pw_df$rank), ]
dotplot <- pw_df %>%
ggplot() +
geom_point(aes(y = celltype, x = model, size = COR, color = RMSE)) +
scale_colour_continuous(high = "#FFFDFF", low = "#f3a17c", limits = c(9,35)) +
theme_light() +
theme(text = element_text(size = 16), legend.title = element_text(size = 12)) +
scale_size_continuous(range = c(1,10)) +
labs(color='RMSE') +
labs(size = "COR")+
ylab("Model cross tested on") +
xlab("Model designed for")+
cowplot::theme_cowplot()
plot_grid(ggtree_plot_col, dotplot, nrow = 2, axis = "tblr", align = 'v', rel_heights = c(1,3))
View(pw_df)
pw_df$rank = rep(c(1,3,4,2,5), each = 5)
View(pw_mtx)
View(pw_df)
pw_df = pw_df[order(pw_df$rank), ]
View(pw_df)
pw_df =
dotplot <- pw_df %>%
ggplot() +
geom_point(aes(y = celltype, x = model, size = COR, color = RMSE)) +
scale_colour_continuous(high = "#FFFDFF", low = "#f3a17c", limits = c(9,35)) +
theme_light() +
theme(text = element_text(size = 16), legend.title = element_text(size = 12)) +
scale_size_continuous(range = c(1,10)) +
labs(color='RMSE') +
labs(size = "COR")+
ylab("Model cross tested on") +
xlab("Model designed for")+
cowplot::theme_cowplot()
plot_grid(ggtree_plot_col, dotplot, nrow = 2, axis = "tblr", align = 'v', rel_heights = c(1,3))
View(pw_df)
View(pw_df)
pw_mtx = matrix(0, nrow = 5, ncol = 5)
pw_df = as.data.frame(pw_mtx)
View(pw_df)
pw_df = comparison_df
View(pw_df)
pw_df = pw_df[order(pw_df$model, pw_df$COR),]
pw_df$celltype = factor(pw_df$celltype, levels = c("B", "CD4T", "CD8T", "MONO", "NK"))
pw_df$model = factor(pw_df$model, levels = c("B", "CD4T", "CD8T", "MONO", "NK"))
pw_df$RMSE[which(pw_df$RMSE > 30)] = 30
pw_df %>%
ggplot() +
geom_point(aes(x = celltype, y = model, size = COR, color = RMSE)) +
scale_colour_continuous(high = "#FFFDFF", low = "#f3a17c", limits = c(9,35)) +
#scale_colour_viridis(limits = c(9,30)) +
theme_light() +
theme(text = element_text(size = 16), legend.title = element_text(size = 12)) +
scale_size_continuous(range = c(1,10)) +
labs(color='RMSE') +
labs(size = "COR")+
xlab("Model cross tested on") +
ylab("Model designed for")
mat = matrix(NA, nrow = 5, ncol = 5)
rownames(mat) = c("B", "CD4T", "CD8T", "MONO", "NK")  # test on
colnames(mat) = c("B", "CD4T", "CD8T", "MONO", "NK")  # model
for(i in 1:nrow(pw_df))
{
r_name = pw_df[i, 1]
c_name = pw_df[i, 4]
mat[r_name, c_name] = pw_df[i, "COR"]
}
plot(hclust(dist(mat %>% as.matrix() %>% t())))
v_clust = hclust(dist(mat %>% as.matrix() %>% t()))  # hclust for rows
ddgram_col <- as.dendrogram(v_clust)
ggtree_plot_col <- ggtree(ddgram_col) + layout_dendrogram()
pw_df$rank = rep(c(1,3,4,2,5), each = 5)
pw_df = pw_df[order(pw_df$rank), ]
View(pw_df)
pw_df$model = factor(pw_df, levels = c("B", "MONO", "CD4T", "CD8T", "NK"))
dotplot <- pw_df %>%
ggplot() +
geom_point(aes(y = celltype, x = model, size = COR, color = RMSE)) +
scale_colour_continuous(high = "#FFFDFF", low = "#f3a17c", limits = c(9,35)) +
theme_light() +
theme(text = element_text(size = 16), legend.title = element_text(size = 12)) +
scale_size_continuous(range = c(1,10)) +
labs(color='RMSE') +
labs(size = "COR")+
ylab("Model cross tested on") +
xlab("Model designed for")+
cowplot::theme_cowplot()
plot_grid(ggtree_plot_col, dotplot, nrow = 2, axis = "tblr", align = 'v', rel_heights = c(1,3))
pw_df = comparison_df
pw_df = pw_df[order(pw_df$model, pw_df$COR),]
pw_df$celltype = factor(pw_df$celltype, levels = c("B", "CD4T", "CD8T", "MONO", "NK"))
pw_df$model = factor(pw_df$model, levels = c("B", "CD4T", "CD8T", "MONO", "NK"))
pw_df$RMSE[which(pw_df$RMSE > 30)] = 30
pw_df$rank = rep(c(1,3,4,2,5), each = 5)
pw_df = pw_df[order(pw_df$rank), ]
pw_df$model = factor(pw_df$model, levels = c("B", "MONO", "CD4T", "CD8T", "NK"))
dotplot <- pw_df %>%
ggplot() +
geom_point(aes(y = celltype, x = model, size = COR, color = RMSE)) +
scale_colour_continuous(high = "#FFFDFF", low = "#f3a17c", limits = c(9,35)) +
theme_light() +
theme(text = element_text(size = 16), legend.title = element_text(size = 12)) +
scale_size_continuous(range = c(1,10)) +
labs(color='RMSE') +
labs(size = "COR")+
ylab("Model cross tested on") +
xlab("Model designed for")+
cowplot::theme_cowplot()
plot_grid(ggtree_plot_col, dotplot, nrow = 2, axis = "tblr", align = 'v', rel_heights = c(1,3))
setwd("~/hzi-li/lab/mihai/LDHA check")
bp = data.frame(read_tsv("./TI_mtor_fc.txt"))
bp$log10p = -log10(bp$p_val)
bp$log10p[which(bp$log10p > 5)] = 5
ggplot(bp, aes(x = celltype, y = gene, size = log10p, color = avg_log2FC)) +
geom_point() +
scale_colour_gradient2(high = muted("red"), low = muted("blue")) +
theme_light() +
labs(size='-log10(Pvalue)') +
labs(colour = "log2FC") +
scale_size(range = c(2,10), limits = c(1,5)) +
theme(text = element_text(size = 12))
library(Seurat)
library(readr)
library(dplyr)
library(ggplot2)
ggplot(bp, aes(x = celltype, y = gene, size = log10p, color = avg_log2FC)) +
geom_point() +
scale_colour_gradient2(high = muted("red"), low = muted("blue")) +
theme_light() +
labs(size='-log10(Pvalue)') +
labs(colour = "log2FC") +
scale_size(range = c(2,10), limits = c(1,5)) +
theme(text = element_text(size = 12))
?muted
library(scales)
ggplot(bp, aes(x = celltype, y = gene, size = log10p, color = avg_log2FC)) +
geom_point() +
scale_colour_gradient2(high = muted("red"), low = muted("blue")) +
theme_light() +
labs(size='-log10(Pvalue)') +
labs(colour = "log2FC") +
scale_size(range = c(2,10), limits = c(1,5)) +
theme(text = element_text(size = 12))
head(bp)
ggplot(bp, aes(x = cell_type, y = gene, size = log10p, color = avg_log2FC)) +
geom_point() +
scale_colour_gradient2(high = muted("red"), low = muted("blue")) +
theme_light() +
labs(size='-log10(Pvalue)') +
labs(colour = "log2FC") +
scale_size(range = c(2,10), limits = c(1,5)) +
theme(text = element_text(size = 12))
bp = data.frame(read_tsv("./TI_mtor_fc.txt")) %>%
filter(cell_type %in% c("B","CD4+ T","CD8+ T","Monocytes","NK"))
bp$log10p = -log10(bp$p_val)
bp$log10p[which(bp$log10p > 5)] = 5
ggplot(bp, aes(x = cell_type, y = gene, size = log10p, color = avg_log2FC)) +
geom_point() +
scale_colour_gradient2(high = muted("red"), low = muted("blue")) +
theme_light() +
labs(size='-log10(Pvalue)') +
labs(colour = "log2FC") +
scale_size(range = c(2,10), limits = c(1,5)) +
theme(text = element_text(size = 12))
bp = data.frame(read_tsv("./BCG_mtor_fc.txt")) %>%
filter(cell_type %in% c("B","CD4+ T","CD8+ T","Monocytes","NK"))
bp$log10p = -log10(bp$p_val)
bp$log10p[which(bp$log10p > 5)] = 5
ggplot(bp, aes(x = cell_type, y = gene, size = log10p, color = avg_log2FC)) +
geom_point() +
scale_colour_gradient2(high = muted("red"), low = muted("blue")) +
theme_light() +
labs(size='-log10(Pvalue)') +
labs(colour = "log2FC") +
scale_size(range = c(2,10), limits = c(1,5)) +
theme(text = element_text(size = 12))
?findmarkers
?FindMarkers
setwd("~/hzi-li/project/age/code")
a = read_csv("../data/interferon alpha genes.txt")
head(a)
a
?read_csv
a = read_csv("../data/interferon alpha genes.txt", col_names = FALSE)
head(a)
a = data.frame(read_csv("../data/interferon alpha genes.txt", col_names = FALSE))
a[1]
dim(a)
a[2]
a[1,]
as.vector(a,1)
as.vector(a[1,])
devtools::create("/Users/wli20/hzi-li/project/age/package/")
devtools::create("/Users/wli20/hzi-li/project/age/package/HPscAC/")
print("error: please add \"donor_id" !")
print("error: please add \"donor_id"\ !")
?is.null
if(0) print("a")
if(1) print("a")
if(!0) print("a")
setwd("~/hzi-li/project/age/code")
?as_tibble
?sample
?as_tibble
cd4t_model = readRDS("./CD4T_model.RDS")
setwd("/Users/wli20/hzi-li/project/age/package/HPscAC/data/")
cd4t_model = readRDS("./CD4T_model.RDS")
cd8t_model = readRDS(paste0("CD8T_models.RDS"))[[7]]
mono_model = readRDS("MONO_model.RDS")
nk_model = readRDS(paste0("NK", "_models.RDS"))[[7]]
b_model = readRDS(paste0("B", "_models.RDS"))[[11]]
model_set = list(cd4t_model, cd8t_model, mono_model, nk_model, b_model)
names(model_set) = c("CD4T", "CD8T", "MONO", "NK", "B")
saveRDS(model_set, "./all_model.RDS")
model_set = readRDS("./all_model.RDS")
names(model_set)
feature_set = readRDS("./all_features.RDS")
feature_set = readRDS("./all_model_inputfeatures.RDS")
?mutate
?map
?group_by
?predict
?group_by
setwd("/Users/wli20/hzi-li/project/age/package/HPscAC/")
devtools::document()
devtools::check()
devtools::document()
devtools::check()
